/*
 * HandViewerController.java
 *
 * Created on Jun 2, 2011, 2:43:40 PM
 */
package traceclient.dialogs;

import listeners.HandMovementListener;
import traceclient.graphs.ClippingBitmapView;

/**
 *
 * @author jbetker
 */
public class HandViewerController extends javax.swing.JDialog implements HandMovementListener {
    ClippingBitmapView canvas;
    int last_depth = 0;
    
    /** Creates new form HandViewerController */
    public HandViewerController(java.awt.Frame parent, ClippingBitmapView cbv) {
        super(parent, false);
        initComponents();
        
        canvas = cbv;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cHandsOnly = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        sSensitivity = new javax.swing.JScrollBar();
        lSensitivity = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cHandsOnly.setSelected(true);
        cHandsOnly.setText("Turn on Hands-only clipping");
        cHandsOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cHandsOnlyActionPerformed(evt);
            }
        });

        jLabel1.setText("Sensitivity:");

        sSensitivity.setMaximum(500);
        sSensitivity.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        sSensitivity.setValue(50);
        sSensitivity.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                sSensitivityAdjustmentValueChanged(evt);
            }
        });

        lSensitivity.setText(Integer.toString(sSensitivity.getValue()));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(cHandsOnly)
                .addGap(42, 42, 42)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sSensitivity, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lSensitivity, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cHandsOnly, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
            .addComponent(sSensitivity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lSensitivity)
                .addContainerGap())
            .addComponent(jLabel1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cHandsOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cHandsOnlyActionPerformed
    }//GEN-LAST:event_cHandsOnlyActionPerformed

    private void sSensitivityAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_sSensitivityAdjustmentValueChanged
        lSensitivity.setText(Integer.toString(sSensitivity.getValue()));
    }//GEN-LAST:event_sSensitivityAdjustmentValueChanged

    public void handMoved(double x, double y, double z) {
        if(cHandsOnly.isSelected()){
            canvas.enableDepthClipping((int)z, sSensitivity.getValue());
        }
        canvas.centerClippingWindowOn((int)x, (int)y);
    }

    public void newCalibration(double tx, double ty, double bx, double by, double z) { }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cHandsOnly;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lSensitivity;
    private javax.swing.JScrollBar sSensitivity;
    // End of variables declaration//GEN-END:variables
}
