package com.appliedanalog.javani;

import com.appliedanalog.javani.dialogs.MeasurementViewer;
import com.appliedanalog.javani.generators.TraceClient;
import com.appliedanalog.javani.listeners.DepthMapListener;
import com.appliedanalog.javani.listeners.HandMovementListener;
import com.appliedanalog.javani.listeners.MessageTransmitter;
import com.appliedanalog.javani.processors.HandMeasurement;
import java.net.Socket;

/**
 *
 * @author James
 */
public class Tracer extends javax.swing.JFrame implements HandMovementListener, DepthMapListener, MessageTransmitter{
    double hx, hy, hz;
    int[] depth_map;
    int dm_width, dm_height;
    TraceClient client;
    HandViewer viewer;

    /** Creates new form Tracer */
    public Tracer() {
        try{
            //init variables
            Socket sock = new Socket("localhost", 18353);
            client = new TraceClient(sock.getInputStream());
            //client = new TraceClientFromLog("trace_log.bin");
            client.addHandListener(this);
            client.addDepthListener(this);
            client.start();
        }catch(Exception e){
            e.printStackTrace();
        }

        initComponents();        
        setLocation(750, 0);
        
        //init subwindows
        viewer = new HandViewer(client);
        viewer.setLocation(getLocation().x, getLocation().y + getHeight());
        viewer.setVisible(true);
    }

    public void handMoved(double x, double y, double z) {
        hx = x;
        hy = y;
        hz = z;
    }

    public void newDepthMap(int[] dm, int width, int height) {
        depth_map = dm;
        dm_width = width;
        dm_height = height;
        if(_do_measurement){
            doMeasurement();
            _do_measurement = false;
        }
    }

    public void newCalibration(double tx, double ty, double bx, double by, double z) { }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bCalibrate = new javax.swing.JButton();
        lText = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bCalibrate.setText("Measure Hand");
        bCalibrate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCalibrateActionPerformed(evt);
            }
        });

        lText.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bCalibrate, javax.swing.GroupLayout.PREFERRED_SIZE, 725, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(lText, javax.swing.GroupLayout.DEFAULT_SIZE, 725, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(lText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bCalibrate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    boolean _do_measurement = false;
    private void bCalibrateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCalibrateActionPerformed
        //client.calibrate(this); //this will calibrate the client to constrain detected hand motion within a box
        lText.setText("Hand measurement slated to take place in 3 seconds, hold your hand upright with fingers and thumb spread.");
        (new Thread(){
            public void run(){
                try{ Thread.sleep(3000); }catch(Exception e){}
                _do_measurement = true;
            }
        }).start();
    }//GEN-LAST:event_bCalibrateActionPerformed

    private void doMeasurement(){
        MeasurementViewer mviewer = new MeasurementViewer(this, depth_map, dm_width, dm_height);
        mviewer.setVisible(true);
        HandMeasurement measurement = new HandMeasurement();
        measurement.enableView(mviewer.getView());
        measurement.measure(depth_map, dm_width, dm_height, (int)hx, (int)hy, (int)hz);
        if(!measurement.handMeasured()){
            lText.setText("Error measuring hand, see console.");
        }else{
            MeasurementViewer mviewer2 = new MeasurementViewer(this, depth_map, dm_width, dm_height);
            mviewer2.attachMeasurement(measurement);
            mviewer2.getView().newDepthMap(depth_map, dm_width, dm_height);
            mviewer2.setVisible(true);
            lText.setText("Hand successfully measured.");
        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tracer().setVisible(true);
            }
        });
    }

    public void println(String msg) {
        lText.setText(msg);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bCalibrate;
    private javax.swing.JLabel lText;
    // End of variables declaration//GEN-END:variables

}
